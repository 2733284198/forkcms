<?php

/**
 * InstallerStep5
 * Step 5 of the Fork installer
 *
 * @package		installer
 * @subpackage	install
 *
 * @author		Davy Hellemans <davy@netlash.com>
 * @author 		Tijs Verkoyen <tijs@netlash.com>
 * @author 		Matthias Mullie <matthias@netlash.com>
 * @since		2.0
 */
class InstallerStep5 extends InstallerStep
{
	/**
	 * Database connection, needed for installation
	 *
	 * @var	SpoonDatabases
	 */
	private $db;


	/**
	 * Executes this step.
	 *
	 * @return	void
	 */
	public function execute()
	{
		// validate all previous steps
		if(!$this->validate()) SpoonHTTP::redirect('index.php?step=1');

		// create configuration files
		$this->createConfigurationFiles();

		// install modules
		$this->installModules();

		// create locale cache
		$this->createLocaleFiles();

		// already installed
		SpoonFile::setContent('installed.txt', date('Y-m-d H:i:s'));

		// show success message
		$this->showSuccess();

		// show output
		$this->tpl->display('layout/templates/5.tpl');
	}


	/**
	 * Build the language files
	 *
	 * @return	void
	 * @param	SpoonDatabase $db		The database connection instance.
	 * @param	string $language		The language to build the locale-file for.
	 * @param	string $application		The application to build the locale-file for.
	 */
	public function buildCache(SpoonDatabase $db, $language, $application)
	{
		// get types
		$types = $db->getEnumValues('locale', 'type');

		// get locale for backend
		$locale = (array) $db->getRecords('SELECT type, module, name, value
											FROM locale
											WHERE language = ? AND application = ?
											ORDER BY type ASC, name ASC, module ASC;',
											array((string) $language, (string) $application));

		// start generating PHP
		$value = '<?php' ."\n";
		$value .= '/**' ."\n";
		$value .= ' *' ."\n";
		$value .= ' * This file is generated by the Backend, it contains' ."\n";
		$value .= ' * more information about the locale. Do NOT edit.' ."\n";
		$value .= ' * ' ."\n";
		$value .= ' * @author		Backend' ."\n";
		$value .= ' * @generated	'. date('Y-m-d H:i:s') ."\n";
		$value .= ' */' ."\n";
		$value .= "\n";

		// loop types
		foreach($types as $type)
		{
			// default module
			$modules = array('core');

			// continue output
			$value .= "\n";
			$value .= '// init var'. "\n";
			$value .= '$'. $type .' = array();' ."\n";
			$value .= '$'. $type .'[\'core\'] = array();' ."\n";

			// loop locale
			foreach($locale as $i => $item)
			{
				// types match
				if($item['type'] == $type)
				{
					// new module
					if(!in_array($item['module'], $modules))
					{
						$value .= '$'. $type .'[\''. $item['module'] .'\'] = array();'. "\n";
						$modules[] = $item['module'];
					}

					// parse
					if($application == 'backend') $value .= '$'. $type .'[\''. $item['module'] .'\'][\''. $item['name'] .'\'] = \''. str_replace('\"', '"', addslashes($item['value'])) .'\';'. "\n";
					else $value .= '$'. $type .'[\''. $item['name'] .'\'] = \''. str_replace('\"', '"', addslashes($item['value'])) .'\';'. "\n";

					// unset
					unset($locale[$i]);
				}
			}
		}

		// close php
		$value .= "\n";
		$value .= '?>';

		// store
		SpoonFile::setContent(PATH_WWW .'/'. $application .'/cache/locale/'. $language .'.php', $value);
	}


	/**
	 * Creates the configuration files
	 *
	 * @return	void
	 */
	private function createConfigurationFiles()
	{
		// build variables
		$variables = array();
		$variables['<spoon-debug-email>'] = SpoonSession::get('email');
		$variables['<database-name>'] = SpoonSession::get('db_database');
		$variables['<database-hostname>'] = addslashes(SpoonSession::get('db_hostname'));
		$variables['<database-username>'] = addslashes(SpoonSession::get('db_username'));
		$variables['<database-password>'] = addslashes(SpoonSession::get('db_password'));
		$variables['<site-domain>'] = (isset($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : 'forkng.local';
		$variables['<site-default-title>'] = 'Fork CMS';
		$variables['\'<site-multilanguage>\''] = SpoonSession::get('multiple_languages') ? 'true' : 'false';
		$variables['<path-www>'] = PATH_WWW;
		$variables['<path-library>'] = PATH_LIBRARY;
		$variables['<site-default-language>'] = SpoonSession::get('default_language');

		// globals files
		$configurationFiles = array('globals.example.php' => 'globals.php',
									'globals_frontend.example.php' => 'globals_frontend.php',
									'globals_backend.example.php' => 'globals_backend.php');

		// loop files
		foreach($configurationFiles as $sourceFilename => $destinationFilename)
		{
			// grab content
			$globalsContent = SpoonFile::getContent(PATH_LIBRARY .'/'. $sourceFilename);

			// assign the variables
			$globalsContent = str_replace(array_keys($variables), array_values($variables), $globalsContent);

			// write the file
			SpoonFile::setContent(PATH_LIBRARY .'/'. $destinationFilename, $globalsContent);
		}

		// general configuration file
		$globalsContent = SpoonFile::getContent(PATH_LIBRARY .'/config.example.php');

		// assign the variables
		$globalsContent = str_replace(array_keys($variables), array_values($variables), $globalsContent);

		// write the file
		SpoonFile::setContent(PATH_WWW .'/backend/cache/config/config.php', $globalsContent);
		SpoonFile::setContent(PATH_WWW .'/frontend/cache/config/config.php', $globalsContent);
	}


	/**
	 * Create locale cache files
	 *
	 * @return	void
	 */
	private function createLocaleFiles()
	{
		// loop all the languages
		foreach(SpoonSession::get('languages') as $language)
		{
			$this->buildCache($this->db, $language, 'frontend');
			$this->buildCache($this->db, $language, 'backend');
		}
	}


	/**
	 * Installs the required and optional modules
	 *
	 * @return	void
	 */
	private function installModules()
	{
		// database instance
		$this->db = new SpoonDatabase('mysql', SpoonSession::get('db_hostname'), SpoonSession::get('db_username'), SpoonSession::get('db_password'), SpoonSession::get('db_database'));

		// utf8 compliance & MySQL-timezone
		$this->db->execute('SET CHARACTER SET utf8, NAMES utf8, time_zone = "+0:00";');

		/**
		 * First we need to install the core. All the linked modules, settings and or sql tables are
		 * being installed.
		 */
		require_once PATH_WWW .'/backend/core/installer/install.php';

		// install the core
		$install = new CoreInstall($this->db, SpoonSession::get('languages'), SpoonSession::get('example_data'),
									array('default_language' => SpoonSession::get('default_language'),
											'spoon_debug_email' => SpoonSession::get('email'),
											'api_email' => SpoonSession::get('email'),
											'site_domain' => (isset($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : 'forkng.local',
											'site_title' => 'Fork CMS',
											'smtp_server' => '',
											'smtp_port' => '',
											'smtp_username' => '',
											'smtp_password' => ''));

		// loop required modules
		foreach($this->modules['required'] as $module)
		{
			// install exists
			if(SpoonFile::exists(PATH_WWW .'/backend/modules/'. $module .'/installer/install.php'))
			{
				// init var
				$variables = array();

				// users module needs custom variables
				if($module == 'users')
				{
					$variables['email'] = SpoonSession::get('email');
					$variables['password'] = SpoonSession::get('password');
				}

				// load file
				require_once PATH_WWW .'/backend/modules/'. $module .'/installer/install.php';

				// class name
				$class = SpoonFilter::toCamelCase($module) .'Install';

				// execute installer
				$install = new $class($this->db, SpoonSession::get('languages'), SpoonSession::get('example_data'), $variables);
			}
		}

		// optional modules
		foreach(SpoonSession::get('modules') as $module)
		{
			if(!in_array($module, $this->modules['required']))
			{
				// install exists
				if(SpoonFile::exists(PATH_WWW .'/backend/modules/'. $module .'/installer/install.php'))
				{
					// init var
					$variables = array();

					// load file
					require_once PATH_WWW .'/backend/modules/'. $module .'/installer/install.php';

					// class name
					$class = SpoonFilter::toCamelCase($module) .'Install';

					// execute installer
					$install = new $class($this->db, SpoonSession::get('languages'), SpoonSession::get('example_data'), $variables);
				}
			}
		}
	}


	/**
	 * Is this step allowed.
	 *
	 * @return	bool
	 */
	public static function isAllowed()
	{
		return (isset($_SESSION['email']) && isset($_SESSION['password']));
	}


	/**
	 * Show the success message
	 *
	 * @return	void
	 */
	private function showSuccess()
	{
		// assign variables
		$this->tpl->assign('url', (isset($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : 'forkng.local');
		$this->tpl->assign('email', SpoonSession::get('email'));
		$this->tpl->assign('password', SpoonSession::get('password'));
	}


	/**
	 * Validates the previous steps
	 */
	private function validate()
	{
		return (InstallerStep1::isAllowed() && InstallerStep2::isAllowed() && InstallerStep3::isAllowed() && InstallerStep4::isAllowed());
	}
}

?>