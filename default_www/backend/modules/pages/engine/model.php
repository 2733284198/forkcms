<?php

/**
 * BackendPagesModel
 *
 * In this file we store all generic functions that we will be using in the PagesModule
 *
 *
 * @package		backend
 * @subpackage	pages
 *
 * @author 		Tijs Verkoyen <tijs@netlash.com>
 * @since		2.0
 */
class BackendPagesModel
{
	const QRY_BROWSE_RECENT = 'SELECT p.id, p.user_id, UNIX_TIMESTAMP(p.edited_on) AS edited_on, p.title
								FROM pages AS p
								WHERE p.status = ? AND p.language = ?
								ORDER BY p.edited_on DESC
								LIMIT ?';
	const QRY_BROWSE_REVISIONS = 'SELECT p.id, p.revision_id, p.user_id, UNIX_TIMESTAMP(p.edited_on) AS edited_on
									FROM pages AS p
									WHERE p.id = ? AND p.status = ? AND p.language = ?
									ORDER BY p.edited_on DESC;';


	/**
	 * Add a number to the string
	 *
	 * @return	string
	 * @param	string $string
	 */
	public static function addNumber($string)
	{
		// split
		$chunks = explode('-', $string);

		// count the chunks
		$count = count($chunks);

		// get last chunk
		$last = $chunks[$count - 1];

		// is nummeric
		if(SpoonFilter::isNumeric($last))
		{
			// remove last chunk
			array_pop($chunks);

			// join together
			$string = implode('-', $chunks ) .'-'. ((int) $last + 1);
		}

		// not numeric
		else $string .= '-2';

		// return
		return $string;
	}


	/**
	 * Build the cache
	 *
	 * @return	void
	 */
	public static function buildCache()
	{
		// get tree
		$levels = self::getTree(array(0));

		// init vars
		$keys = array();
		$navigation = array();

		// loop levels
		foreach($levels as $level => $pages)
		{
			// loop all items on this level
			foreach($pages as $pageID => $page)
			{
				// init var
				$parentID = (int) $page['parent_id'];

				// get url for parent
				$url = (isset($keys[$parentID])) ? $keys[$parentID] : '';

				// home is special
				if($pageID == 1) $page['url'] = '';

				// add it
				$keys[$pageID] = trim($url .'/'. $page['url'], '/');

				// build navigation array
				$temp = array();
				$temp['page_id'] = $pageID;
				$temp['url'] = $page['url'];
				$temp['full_url'] = $keys[$pageID];
				$temp['title'] = $page['title'];
				$temp['navigation_title'] = $page['navigation_title'];

				// add it
				$navigation[$page['type']][$page['parent_id']][$pageID] = $temp;
			}
		}

		// order by URL
		asort($keys);

		// write the key-file
		$keysString = '<?php' ."\n\n";
		$keysString .= '/**'."\n";
		$keysString .= ' * This file is generated by the Backend, it contains' ."\n";
		$keysString .= ' * the mapping between a pageID and the URL'."\n";
		$keysString .= ' * '."\n";
		$keysString .= ' * @author	Backend'."\n";
		$keysString .= ' * @generated	'. date('Y-m-d H:i:s') ."\n";
		$keysString .= ' */'."\n\n";

		// loop all keys
		foreach($keys as $pageID => $url) $keysString .= '$keys['. $pageID .'] = \''. $url .'\';'."\n";

		// end file
		$keysString .= "\n".'?>';

		// write the file
		SpoonFile::setContent(PATH_WWW .'/frontend/cache/navigation/keys_'. BackendLanguage::getWorkingLanguage() .'.php', $keysString);

		// write the navigation-file
		$navigationString = '<?php' ."\n\n";
		$navigationString .= '/**'."\n";
		$navigationString .= ' * This file is generated by the Backend, it contains' ."\n";
		$navigationString .= ' * more information about the page-structure'."\n";
		$navigationString .= ' * '."\n";
		$navigationString .= ' * @author	Backend'."\n";
		$navigationString .= ' * @generated	'. date('Y-m-d H:i:s') ."\n";
		$navigationString .= ' */'."\n\n";

		// loop all types
		foreach($navigation as $type => $pages)
		{
			// loop all parents
			foreach($pages as $parentID => $page)
			{
				// loop all pages
				foreach($page as $pageID => $properties)
				{
					// loop properties
					foreach($properties as $key => $value)
					{
						// cast properly
						if($key == 'page_id') $value = (int) $value;
						else $value = '\''. $value .'\'';

						// add line
						$navigationString .= '$navigation[\''. $type .'\']['. $parentID .']['. $pageID .'][\''. $key .'\'] = '. $value .';'."\n";
					}

					$navigationString .= "\n";
				}
			}
		}

		// end file
		$navigationString .= '?>';

		// write the file
		SpoonFile::setContent(PATH_WWW .'/frontend/cache/navigation/navigation_'. BackendLanguage::getWorkingLanguage() .'.php', $navigationString);
	}


	/**
	 * Build HTML for a template (visual representation)
	 *
	 * @return	string
	 * @param	array $template
	 */
	public static function buildTemplateHTML($template)
	{
		// validate
		if(!isset($template['data']['format'])) throw new BackendException('Invalid template-format.');

		// init var
		$html = '';

		// split into rows
		$rows = explode('],[', $template['data']['format']);

		// loop rows
		foreach($rows as $row)
		{
			// cleanup
			$row = str_replace(array('[',']'), '', $row);

			// add start html
			$html .= '<table border="0" cellpadding="2" cellspacing="2">'."\n";
			$html .= '	<tbody>'."\n";

			// split into cells
			$cells = explode(',', $row);

			// loop cells
			foreach($cells as $cell)
			{
				// selected state
				$selected = (substr_count($cell, ':selected') > 0);

				// remove selected state
				if($selected) $cell = str_replace(':selected', '', $cell);

				// decide selected state
				$exists = (isset($template['data']['names'][$cell]));

				// get title & index
				$title = ($exists) ? $template['data']['names'][$cell] : '';
				$index = ($exists) ? $cell : '';


				// does the cell need content
				if(!$exists) $html .= '		<td> </td>'."\n";

				else
				{
					// is the item selected?
					if($selected) $html .= '		<td class="selected"><a href="#block-'. $index .'" class="toggleDiv" title="'. $title .'">'. $index .'</a></td>'."\n";
					else $html .= '		<td><a href="#block-'. $index .'" class="toggleDiv" title="'. $title .'">'. $index .'</a></td>'."\n";
				}
			}

			// end html
			$html .= '	</tbody>'."\n";
			$html .= '</table>'."\n";
		}

		// return html
		return $html;
	}


	/**
	 * Creates the html for the menu
	 *
	 * @return	string
	 * @param	int[optional] $parentId
	 * @param	int[optional] $startDepth
	 * @param	int[optional] $maxDepth
	 * @param	array[optional] $excludedIds
	 * @param	string[optional] $html
	 */
	public static function createHtml($type = 'page', $depth = 0, $parentId = 1, $html = '')
	{
		// require
		require_once PATH_WWW .'/frontend/cache/navigation/navigation_'. BackendLanguage::getWorkingLanguage() .'.php';

		// check if item exists
		if(isset($navigation[$type][$depth][$parentId]))
		{
			// start html
			$html .= '<ul>' . "\n";

			// loop elements
			foreach($navigation[$type][$depth][$parentId] as $key => $aValue)
			{
				$html .= "\t<li>" . "\n";
				$html .= "\t\t". '<a href="#">'. $aValue['navigation_title'] .'</a>' . "\n";

				// insert recursive here!
				if(isset($navigation[$type][$depth + 1][$key])) $html .= self::createHtml($type, $depth + 1, $parentId, '');

				// add html
				$html .= '</li>' . "\n";
			}

			// end html
			$html .= '</ul>' . "\n";
		}

		// return
		return $html;
	}


	/**
	 * Check if a page exists
	 *
	 * @return	bool
	 * @param	int $id
	 */
	public static function exists($id)
	{
		// redefine
		$id = (int) $id;
		$language = BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get number of rows, if that result is more than 0 it means the page exists
		return (bool) ($db->getNumRows('SELECT p.id
										FROM pages AS p
										WHERE p.id = ? AND p.language = ? AND p.status IN ("active", "draft");',
										array($id, $language)) > 0);
	}


	/**
	 * Get the data for a record
	 *
	 * @return	array
	 * @param	int $id
	 */
	public static function get($id)
	{
		// redefine
		$id = (int) $id;
		$language = BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get page (active version)
		$return = (array) $db->getRecord('SELECT *, UNIX_TIMESTAMP(p.publish_on) AS publish_on, UNIX_TIMESTAMP(p.created_on) AS created_on, UNIX_TIMESTAMP(p.edited_on) AS edited_on
											FROM pages AS p
											WHERE p.id = ? AND p.language = ? AND p.status = ?
											LIMIT 1;',
											array($id, $language, 'active'));

		// can't be deleted
		if(in_array($return['id'], array(1, 404))) $return['allow_delete'] = 'N';

		// can't be moved
		if(in_array($return['id'], array(1, 404))) $return['allow_move'] = 'N';

		// can't have children
		if(in_array($return['id'], array(404))) $return['allow_move'] = 'N';

		// convert into bools for use in template engine
		$return['move_allowed'] = (bool) ($return['allow_move'] == 'Y');
		$return['children_allowed'] = (bool) ($return['allow_children'] == 'Y');
		$return['edit_allowed'] = (bool) ($return['allow_edit'] == 'Y');
		$return['delete_allowed'] = (bool) ($return['allow_delete'] == 'Y');

		// return
		return $return;
	}


	/**
	 * Get the revisioned data for a record
	 *
	 * @return	array
	 * @param	int $id
	 * @param	int $revisionId
	 */
	public static function getRevision($id, $revisionId)
	{
		// redefine
		$id = (int) $id;
		$revisionOd = (int) $revisionId;
		$language = BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		$db->setDebug(true);

		// get page (active version)
		$return = (array) $db->getRecord('SELECT *, UNIX_TIMESTAMP(p.publish_on) AS publish_on, UNIX_TIMESTAMP(p.created_on) AS created_on, UNIX_TIMESTAMP(p.edited_on) AS edited_on
											FROM pages AS p
											WHERE p.id = ? AND p.revision_id = ? AND p.language = ?
											LIMIT 1;',
											array($id, $revisionId, $language));

		// can't be deleted
		if(in_array($return['id'], array(1, 404))) $return['allow_delete'] = 'N';

		// can't be moved
		if(in_array($return['id'], array(1, 404))) $return['allow_move'] = 'N';

		// can't have children
		if(in_array($return['id'], array(404))) $return['allow_move'] = 'N';

		// convert into bools for use in template engine
		$return['move_allowed'] = (bool) ($return['allow_move'] == 'Y');
		$return['children_allowed'] = (bool) ($return['allow_children'] == 'Y');
		$return['edit_allowed'] = (bool) ($return['allow_edit'] == 'Y');
		$return['delete_allowed'] = (bool) ($return['allow_delete'] == 'Y');

		// return
		return $return;
	}


	/**
	 * Get the blocks in a certain page
	 *
	 * @return	array
	 * @param	int $id
	 */
	public static function getBlocks($id)
	{
		// redefine
		$id = (int) $id;
		$language = BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get page (active version)
		return (array) $db->retrieve('SELECT pb.*, UNIX_TIMESTAMP(pb.created_on) AS created_on, UNIX_TIMESTAMP(pb.edited_on) AS edited_on
										FROM pages_blocks AS pb
										INNER JOIN pages AS p ON pb.revision_id = p.revision_id
										WHERE p.id = ? AND p.language = ? AND p.status = ?;',
										array($id, $language, 'active'));
	}


	/**
	 * Get revisioned blocks for a certain page
	 *
	 * @return	array
	 * @param 	int $id
	 * @param	int $revisionId
	 */
	public static function getBlocksRevision($id, $revisionId)
	{
		// redefine
		$id = (int) $id;
		$revisionId = (int) $revisionId;
		$language = BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get page (active version)
		return (array) $db->retrieve('SELECT pb.*, UNIX_TIMESTAMP(pb.created_on) AS created_on, UNIX_TIMESTAMP(pb.edited_on) AS edited_on
										FROM pages_blocks AS pb
										INNER JOIN pages AS p ON pb.revision_id = p.revision_id
										WHERE p.id = ? AND p.revision_id = ? AND p.language = ?;',
										array($id, $revisionId, $language));
	}


	/**
	 * @todo	Get all the available extra's
	 *
	 * @return	array
	 */
	public static function getExtras()
	{
		return array('html' => BL::getLabel('Editor'));
	}


	/**
	 * Get the full-url for a given menuId
	 *
	 * @return	string
	 * @param	int $menuId
	 */
	public static function getFullURL($id)
	{
		// generate the cache files if needed
		if(!SpoonFile::exists(PATH_WWW .'/frontend/cache/navigation/keys_'. BackendLanguage::getWorkingLanguage() .'.php')) self::buildCache();

		// require the file
		require PATH_WWW .'/frontend/cache/navigation/keys_'. BackendLanguage::getWorkingLanguage() .'.php';

		// available in generated file?
		if(isset($keys[$id])) $url = $keys[$id];

		else
		{
			// @todo	this method should use a genious caching-system
		}

		// if the is available in multiple languages we should add the current lang
		if(SITE_MULTILANGUAGE) $url = '/'. BackendLanguage::getWorkingLanguage() .'/'. $url;

		// just prepend with slash
		else $url = '/'. $url;

		// return
		return $url;
	}


	/**
	 * Get the maximum unique id for blocks
	 *
	 * @return	int
	 */
	public static function getMaximumBlockId()
	{
		// get db
		$db = BackendModel::getDB();

		// get the maximum id
		return (int) $db->getVar('SELECT MAX(pb.id)
									FROM pages_blocks AS pb;');
	}


	/**
	 * Get the maximum unique id for pages
	 *
	 * @return	int
	 * @param	string[optional] $language
	 */
	public static function getMaximumMenuId($language = null)
	{
		// redefine
		$language = ($language !== null) ? (string) $language : BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get the maximum id
		$maximumMenuId = (int) $db->getVar('SELECT MAX(p.id)
											FROM pages AS p
											WHERE p.language = ?;',
											array($language));

		// pages created by a user should have an id higher then 1000
		// with this hack we can easily find pages added by a user
		if($maximumMenuId < 1000 && !BackendAuthentication::getUser()->isGod()) return $maximumMenuId + 1000;

		// fallback
		return $maximumMenuId;
	}


	/**
	 * Get the maximum sequence inside a leaf
	 *
	 * @return	int
	 * @param	int $parentId
	 * @param	int[optional] $language
	 */
	public static function getMaximumSequence($parentId, $language = null)
	{
		// redefine
		$parentId = (int) $parentId;
		$language = ($language !== null) ? (string) $language : BackendLanguage::getWorkingLanguage();

		// get db
		$db = BackendModel::getDB();

		// get the maximum sequence inside a certain leaf
		return (int) $db->getVar('SELECT MAX(p.sequence)
									FROM pages AS p
									WHERE p.language = ? AND p.parent_id = ?;',
									array($language, $parentId));
	}


	/**
	 * Get the subtree for a root element
	 *
	 * @return	string
	 * @param	array $navigation
	 * @param 	int $parentId
	 * @param	string[optional] $html
	 */
	public static function getSubtree($navigation, $parentId, $html = '')
	{
		// redefine
		$navigation = (array) $navigation;
		$parentId = (int) $parentId;
		$html = '';

		// any elements
		if(isset($navigation['page'][$parentId]) && !empty($navigation['page'][$parentId]))
		{
			// start
			$html .= '<ul>'."\n";

			// loop pages
			foreach($navigation['page'][$parentId] as $page)
			{
				// start
				$html .= '<li>'."\n";

				// insert link
				$html .= '	<a href="'. BackendModel::createURLForAction('edit', null, null, array('id' => $page['page_id'])) .'">'. $page['navigation_title'] .'</a>'."\n";

				// get childs
				$html .= self::getSubtree($navigation, $page['page_id'], $html);

				// end
				$html .= '</li>'."\n";
			}

			// end
			$html .= '</ul>'."\n";
		}

		// return
		return $html;
	}


	/**
	 * Get templates
	 *
	 * @return unknown
	 */
	public static function getTemplates()
	{
		// get db
		$db = BackendModel::getDB();

		// get templates
		$templates = (array) $db->retrieve('SELECT t.id, t.label, t.path, t.number_of_blocks, t.is_default, t.data
											FROM pages_templates AS t
											WHERE t.active = ?;',
											array('Y'), 'id');

		// loop templates to unserialize the data
		foreach($templates as $key => $row)
		{
			// unserialize
			$templates[$key]['data'] = unserialize($row['data']);

			// build template HTML
			$templates[$key]['html'] = self::buildTemplateHTML($templates[$key]);
		}

		// add json
		foreach($templates as $key => $row)	$templates[$key]['json'] = json_encode($row);

		// return
		return (array) $templates;
	}


	/**
	 * Get all pages/level
	 *
	 * @param	array $ids
	 * @param	array[optional] $data
	 * @param	int[optional] $level
	 * @return	array
	 */
	private static function getTree(array $ids, array $data = null, $level = 1)
	{
		// get db
		$db = BackendModel::getDB();

		$data[$level] = (array) $db->retrieve('SELECT p.id, p.title, p.parent_id, p.navigation_title, p.type,
													m.url
												FROM pages AS p
												INNER JOIN meta AS m ON p.meta_id = m.id
												WHERE p.parent_id IN ('. implode(', ', $ids) .')
												AND p.status = ? AND p.language = ?
												ORDER BY p.sequence ASC;',
												array('active', BackendLanguage::getWorkingLanguage()), 'id');

		// get the childIDs
		$childIds = array_keys($data[$level]);

		// build array
		if(!empty($data[$level])) $data = self::getTree($childIds, $data, ++$level);

		// cleanup
		else unset($data[$level]);

		return $data;
	}


	/**
	 * Get the tree
	 *
	 * @return	string
	 */
	public static function getTreeHTML()
	{
		// check if the cached file exists, if not we generated it
		if(!SpoonFile::exists(PATH_WWW .'/frontend/cache/navigation/navigation_'. BackendLanguage::getWorkingLanguage() .'.php')) self::buildCache();

		// require the file
		require_once PATH_WWW .'/frontend/cache/navigation/navigation_'. BackendLanguage::getWorkingLanguage() .'.php';

		// start HTML
		$html = '<h4>'. ucfirst(BL::getLabel('MainNavigation')) .'</h4>'."\n";
		$html .= '<ul>'."\n";
		$html .= '	<li>';

		// homepage should
		$html .= '		<a href="'. BackendModel::createURLForAction('edit', null, null, array('id' => 1)) .'">'. ucfirst(BL::getLabel('Home')) .'</a>'."\n";

		// add subpages
		$html .= self::getSubTree($navigation, 1);

		// end
		$html .= '	</li>'."\n";
		$html .= '</ul>'."\n";


		// are there any meta pages
		if(isset($navigation['meta'][0]) && !empty($navigation['meta'][0]))
		{
			// meta pages
			$html .= '	<h4>'. ucfirst(BL::getLabel('Meta')) .'</h4>'."\n";

			// start
			$html .= "\n". '<ul>'."\n";

			// loop the items
			foreach($navigation['meta'][0] as $page)
			{
				// start
				$html .= '	<li>'."\n";

				// insert link
				$html .= '		<a href="'. BackendModel::createURLForAction('edit', null, null, array('id' => $page['page_id'])) .'">'. $page['navigation_title'] .'</a>'."\n";

				// insert subtree
				$html .= self::getSubTree($navigation, $page['page_id']);

				// end
				$html .= '	</li>'."\n";
			}

			// end
			$html .= '</ul>'."\n";
		}

		// footer pages
		$html .= '<h4>'. ucfirst(BL::getLabel('Footer')) .'</h4>'."\n";

		// are there any footer pages
		if(isset($navigation['footer'][0]) && !empty($navigation['footer'][0]))
		{
			// start
			$html .= "\n". '<ul>'."\n";

			// loop the items
			foreach($navigation['footer'][0] as $page)
			{
				// start
				$html .= '	<li>'."\n";

				// insert link
				$html .= '		<a href="'. BackendModel::createURLForAction('edit', null, null, array('id' => $page['page_id'])) .'">'. $page['navigation_title'] .'</a>'."\n";

				// end
				$html .= '	</li>'."\n";
			}

			// end
			$html .= '</ul>'."\n";
		}

		// are there any root pages
		if(isset($navigation['root'][0]) && !empty($navigation['root'][0]))
		{
			// meta pages
			$html .= '<h4>'. ucfirst(BL::getLabel('Root')) .'</h4>'."\n";

			// start
			$html .= "\n". '<ul>'."\n";

			// loop the items
			foreach($navigation['root'][0] as $page)
			{
				// start
				$html .= '	<li>'."\n";

				// insert link
				$html .= '		<a href="'. BackendModel::createURLForAction('edit', null, null, array('id' => $page['page_id'])) .'">'. $page['navigation_title'] .'</a>'."\n";

				// insert subtree
				$html .= self::getSubTree($navigation, $page['page_id']);

				// end
				$html .= '	</li>'."\n";
			}

			// end
			$html .= '</ul>'."\n";
		}

		// return
		return $html;
	}


	/**
	 * @todo	fix me...
	 *
	 * @param unknown_type $url
	 * @param unknown_type $id
	 * @return unknown
	 */
	public static function getUrl($url, $id = null, $parentId = 0)
	{
		// redefine
		$url = (string) $url;
		$parentId = (int) $parentId;

		// get db
		$db = BackendModel::getDB();

		// no specific id
		if($id === null)
		{
			// get number of childs within this parent with the specified url
			$number = (int) $db->getNumRows('SELECT p.id
												FROM pages AS p
												INNER JOIN meta AS m ON p.meta_id = m.id
												WHERE p.parent_id = ? AND  p.status = ? AND m.url = ?;',
												array($parentId, 'active', $url));

			// no items?
			if($number != 0) $url = $url;

			// there are items so, call this method again.
			else
			{
				// add a number
				$url = self::addNumber($url);

				// recall this method, but with a new url
				return self::getUrl($url, $id, $parentId);
			}
		}

		// one item should be ignored
		else
		{
			// get number of childs within this parent with the specified url
			$number = (int) $db->getNumRows('SELECT p.id
												FROM pages AS p
												INNER JOIN meta AS m ON p.meta_id = m.id
												WHERE p.parent_id = ? AND  p.status = ? AND m.url = ? AND p.id != ?;',
												array($parentId, 'active', $url, $id));

			// no items?
			if($number == 0) $url = $url;

			// there are items so, call this method again.
			else
			{
				// add a number
				$url = self::addNumber($url);

				// recall this method, but with a new url
				return self::getUrl($url, $id, $parentId);
			}
		}

		// get full url
		$fullUrl = self::getFullUrl($parentId) .'/'. $url;

		// check if folder exists
		if(SpoonDirectory::exists(PATH_WWW .'/'. $fullUrl))
		{
			// add a number
			$url = self::addNumber($url);

			// recall this method, but with a new url
			return self::getUrl($url, $id, $parentId);
		}

		// check if it is an appliation
		if(in_array(trim($fullUrl, '/'), array_keys(ApplicationRouting::getRoutes())))
		{
			// add a number
			$url = self::addNumber($url);

			// recall this method, but with a new url
			return self::getUrl($url, $id, $parentId);
		}

		// return the unique url!
		return $url;
	}


	/**
	 * Insert a page
	 *
	 * @return	int
	 * @param	array $page
	 */
	public static function insert(array $page)
	{
		// get db
		$db = BackendModel::getDB();

		// insert
		$id = (int) $db->insert('pages', $page);

		// rebuild the cache
		self::buildCache();

		// return the new revision id
		return $id;
	}


	/**
	 * Insert multiple blocks at once
	 *
	 * @return	void
	 * @param	array $blocks
	 */
	public static function insertBlocks(array $blocks)
	{
		// get db
		$db = BackendModel::getDB();

		// insert
		$db->insert('pages_blocks', $blocks);
	}


	public static function update(array $page)
	{
		// get db
		$db = BackendModel::getDB();

		// update old revisions
		$db->update('pages', array('status' => 'archive'), 'id = ?', $page['id']);

		// insert
		$id = (int) $db->insert('pages', $page);

		// @todo	remove revisions that should be removed...

		// rebuild the cache
		self::buildCache();

		// return the new revision id
		return $id;
	}


	public static function updateBlocks(array $blocks)
	{
		// get db
		$db = BackendModel::getDB();

		// update old revisions
		$db->update('pages_blocks', array('status' => 'archive'), 'id = ?', $blocks[0]['id']);

		// insert
		$db->insert('pages_blocks', $blocks);

		// @todo	remove revisions that should be removed...
	}

}

?>