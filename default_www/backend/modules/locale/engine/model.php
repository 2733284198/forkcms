<?php

/**
 * BackendLocaleModel
 *
 * In this file we store all generic functions that we will be using in the locale module
 *
 *
 * @package		backend
 * @subpackage	locale
 *
 * @author 		Davy Hellemans <davy@netlash.com>
 * @since		2.0
 */
class BackendLocaleModel
{
	const QRY_DATAGRID_BROWSE = 'SELECT id, language, application, module, type, name, value FROM locale AS l';

	public static function buildCache($language, $application)
	{
		// get db
		$db = BackendModel::getDB();

		$types = $db->getEnumValues('locale', 'type');

		$locale = (array) $db->getRecords('SELECT type, module, name, value FROM locale WHERE language = ? AND application = ? ORDER BY type ASC, name ASC, module ASC;', array((string) $language, (string) $application));

		// @todo davy - opkuisen en/of vereenvoudigen
		$value = '<?php' ."\n";
		$value .= '/**' ."\n";
		$value .= ' *' ."\n";
		$value .= ' * This file is generated by the Backend, it contains' ."\n";
		$value .= ' * more information about the locale. Do NOT edit.' ."\n";
		$value .= ' * ' ."\n";
		$value .= ' * @author		Backend' ."\n";
		$value .= ' * @generated	'. date('Y-m-d H:i:s') ."\n";
		$value .= ' */' ."\n";
		$value .=  "\n";

		// loop types
		foreach($types as $type)
		{
			$modules = array('core');

			$value .=  "\n";
			$value .= '// init var'. "\n";
			$value .= '$'. $type .' = array();' ."\n";
			$value .= '$'. $type .'[\'core\'] = array();' ."\n";

			foreach($locale as $i => $item)
			{
				if($item['type'] == $type)
				{
					if(!in_array($item['module'], $modules))
					{
						$value  .= '$'. $type .'[\''. $item['module'] .'\'] = array();'. "\n";
						$modules[] = $item['module'];
					}

					// parse
					$value .= '$'. $type .'[\''. $item['module'] .'\'][\''. $item['name'] .'\'] = \''. addslashes($item['value']) .'\';'. "\n";

					// unset
					unset($locale[$i]);
				}
			}

		}

		$value .=  "\n";
		$value .= '?>';

		SpoonFile::setContent(constant(strtoupper($application) .'_CACHE_PATH') .'/locale/'. $language .'.php', $value);

	}


	public static function delete(array $ids)
	{
		// get db
		$db = BackendModel::getDB();

		// delete records
		$db->execute('DELETE FROM locale WHERE id IN ('. implode(',', $ids) .');');

		// rebuild cache
		self::buildCache('nl', 'backend');
		self::buildCache('nl', 'frontend');
	}

	public static function exists($id)
	{
		// get db
		$db = BackendModel::getDB();

		// exists?
		return $db->getNumRows('SELECT id FROM locale WHERE id = ?;', (int) $id);
	}

	public static function existsByName($name, $type, $module, $language, $id = null)
	{
		// get db
		$db = BackendModel::getDB();

		// exists?
		if($id !== null) return $db->getNumRows('SELECT id FROM locale WHERE name = ? AND type = ? AND module = ? AND language = ? AND id != ?;', array((string) $name, (string) $type, (string) $module, (string) $language, (int) $id));
		else return $db->getNumRows('SELECT id FROM locale WHERE name = ? AND type = ? AND module = ? AND language = ?;', array((string) $name, (string) $type, (string) $module, (string) $language));
	}


	public static function get($id)
	{
		// redefine
		$id = (int) $id;

		// get db
		$db = BackendModel::getDB();

		// get record and return it
		return (array) $db->getRecord('SELECT * FROM locale WHERE id = ?;', (int) $id);
	}


	public static function getTypesForDropDown()
	{
		// get db
		$db = BackendModel::getDB();

		// init var
		$dropdown = array();

		// fetch types
		$types = BackendModel::getDB()->getEnumValues('locale', 'type');

		// add types
		foreach($types as $type) $dropdown[$type] = $type;

		// get data
		return $dropdown;
	}


	public static function insert(array $item)
	{
		// get db
		$db = BackendModel::getDB();

		// insert item
		$id = (int) $db->insert('locale', $item);

		// rebuild the cache
		self::buildCache($item['language'], $item['application']);

		// new id
		return $id;
	}

	public static function update($id, array $item)
	{
		// get db
		$db = BackendModel::getDB();

		// update category
		$db->update('locale', $item, 'id = ?', (int) $id);

		// rebuild the cache
		self::buildCache($item['language'], $item['application']);
	}
}

?>