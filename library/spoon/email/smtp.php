<?php/** * Spoon Library * * This source file is part of the Spoon Library. More information, * documentation and tutorials can be found @ http://www.spoon-library.be * * @package			email * * * @author			Dave Lens <dave@spoon-library.be> * @since			1.0.0 */class SpoonSMTP {	/**	 * connection resource storage	 *	 * @var resource	 */	private $connection;	/**	 * hosts storage	 *	 * @var string	 */	private $host = 'localhost';	/**	 * port storage	 *	 * @var int	 */	private $port = 25;	/**	 * most recent replied code	 *	 * @var string	 */	private $repliedCode;	/**	 * host reply storage	 *	 * @var string	 */	private $replies;	/**	 * connection time-out storage	 *	 * @var int	 */	private $timeOut = 30;	/**	 * class constructor	 *	 * @return void	 * @param string[optional] $host	 * @param int[optional] $port	 * @param int[optional] $timeOut	 */	public function __construct($host, $port, $timeOut)	{		// set connection related variables		$this->host = $host;		$this->port = $port;		$this->timeOut = $timeOut;		// make connection		if(!$this->connect()) throw new SpoonEmailException('Connection to host '.$this->host.':'.$this->port.' failed.');		// say hi to the host		if(!$this->helo()) throw new SpoonEmailException('HELO went wrong: SMTP code '.$this->repliedCode);	}	/**	 * attempts to authenticate with the smtp host	 * this ignores any errors before the username was sent	 * because SMTP pretends the auth didn't happen and continues	 *	 * @return void	 * @param string $username	 * @param string $password	 */	public function authenticate($username, $password)	{		// check if we have a connection active		if(!$this->connection) throw new SpoonEmailException('No SMTP connection found.');		// push the auth login, only continue on code 334		if($this->say('AUTH LOGIN') === 334)		{			// send username			if($this->say(base64_encode($username)) === 334)			{				// send password				if($this->say(base64_encode($password)) === 235) return true;				// authentication failed				return false;			}			// authentication failed			return false;		}		// ignore any errors we might have gotten on AUTH LOGIN and let the class continue		return true;	}	/**	 * connect to the SMTP host	 *	 * @return bool	 */	private function connect()	{		// open connection		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeOut);		// connection made		if($this->connection)		{			// save the reply			$this->saveReply();					// set the time-out on the socket			socket_set_timeout($this->connection, $this->timeOut, 0);			// report our success			return true;		}		// connection failed		return false;	}	/**	 * returns the SMTP code from a reply - basicly this is just a substring to make life easier	 *	 * @return int	 * @param string $reply	 */	private function getCode($reply = null)	{		// check input		if($reply === null) throw new SpoonEmailException('No input given for '.__METHOD__.', fix this.');		// return the status code		return (int) substr($reply, 0, 3);	}	/**	 * returns whatever the smtp connection answered	 *	 * @return string	 */	public function getOutput()	{		// return the replies		return (string) $this->replies;	}	/**	 * returns the last SMTP code sent from the host	 *	 * @return int	 */	public function getRepliedCode()	{		// return the last SMTP code sent from the host		return (int) $this->repliedCode;	}	/**	 * HELO cmd, our identification to the host we're connecting to	 *	 * @return void	 * @param string $host	 */	private function helo($host = null)	{		// check input. we won't throw an error on empty input but fill in the http host instead.		if($host === null) $host = $_SERVER['HTTP_HOST'];		// push HELO command		$this->say('HELO '. $host);		// check if HELO failed		if($this->repliedCode !== 250) return false;		// HELO succeeded		return true;	}	/**	 * returns output if there is some	 *	 * @return string	 */	private function listen()	{		// return output		return (string) @fgets($this->connection, 515).'<br />';	}	/**	 * MAIL FROM command, function that shows the host the sender's email address	 *	 * @return bool	 * @param string $email	 */	public function mailFrom($email = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid email given for '.__METHOD__);		// push MAIL FROM command		$this->say('MAIL FROM:<'.$email.'>');		// smtp code 250 means success		if($this->repliedCode === 250) return true;		// command failed		return false;	}	/**	 * QUIT command, closes connection with the host properly. returns true on success	 *	 * @return void	 */	public function quit()	{		// push QUIT command		$this->say('QUIT');		// smtp code 221 means success		if($this->repliedCode === 221) return true;		// for some reason this command failed -.-		return false;	}	/**	 * RCPT TO command, function that shows the host the recipients's email address	 *	 * @return bool	 * @param string $email	 */	public function rcptTo($email = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid email given for '.__METHOD__);				// push MAIL FROM command		$this->say('RCPT TO: <'.$email.'>');		// smtp code 250 means success		if($this->repliedCode === 250) return true;		// command failed		return false;	}	/**	 * stores a reply whenever a function is called	 *	 * @return void	 * @param string[optional] $reply	 */	private function saveReply($reply = null)	{		// no reply given means we listen for a fresh one		if($reply === null) $reply = $this->listen();		// store reply		$this->replies .= $reply;	}	/**	 * pushes a command to the host and returns + saves the status code	 *	 * @return int	 * @param string $message	 * @param int $bytes	 */	private function say($message = null)	{		// say something to the host		@fputs($this->connection, $message . SpoonEmail::CRLF);		// listen to the reply and store it		$reply = $this->listen();		// save for debugging		$this->saveReply($reply);		// update the latest status code and return it		return (int) $this->repliedCode = $this->getCode($reply);	}	/**	 * sends an email, return true on success	 *	 * @return bool	 * @param string $data	 */	public function send($data = null)	{		// push the DATA command		$this->say('DATA');		// code 354 means we can continue		if($this->repliedCode === 354)		{			// push our data			$this->say($data . SpoonEmail::CRLF .'.');						// code 250 means the mail has been sent			if($this->repliedCode === 250) return true;						// mail has not been sent			return false;		}	}}?>