<?php/** Spoon class */require_once 'spoon/spoon.php';/** SpoonEmailException class */require_once 'spoon/email/exception.php';/** SpoonFile class */require_once 'spoon/filesystem/file.php';/** * Spoon Library * * This source file is part of the Spoon Library. More information, * documentation and tutorials can be found @ http://www.spoon-library.be * * @package			email * * * @author			Dave Lens <dave@spoon-library.be> * @since			1.0.0 */class SpoonEmail{	/**	 * carriage return line feed, in hex values	 *	 * @var int	 */	const CRLF = "\x0d\x0a";			/**	 * attachments storage	 * 	 * @var array	 */	private $attachments = array();			/**	 * BCC storage	 * 	 * @var array	 */	private $bcc = array();			/**	 * CC storage	 * 	 * @var array	 */	private $cc = array();			/**	 * charset storage	 *	 * @var string	 */	private $charset = 'iso-8859-1';	/**	 * email content storage	 *	 * @var array	 */	private $content = array('html' => '', 'plain' => '');			/**	 * content type	 * 	multipart/alternative by default	 * 	 * @var string	 */	private $contentType = 'multipart/alternative';			/**	 * debug status	 * 	 * @var bool	 */	private $debug = SPOON_DEBUG;	/**	 * sender information	 *	 * @var array	 */	private $from = array('name' => '', 'email' => '');	/**	 * headers string storage	 *	 * @return void	 */	private $headers = '';			/**	 * This contains an email address suffix based on the host (like 'spoon-library.be')	 *	 * @var string	 */	private $hostSuffix = 'localhost';	/**	 * mailing method. Can be 'mail' or 'smtp'	 *	 * @var string	 */	private $mailMethod = 'mail';			/**   * e-mail priority storage (1 = high, 3 = normal, 5 = low)   *    * @var int   */  private $priority = 3;			/**	 * regular recipients storage	 *	 * @var	array	 */	private $recipients = array();			/**	 * Reply-To storage	 * 	 * @var array	 */	private $replyTo = array('name' => '', 'email' => '');	/**	 * smtp object instance	 *	 * @var SpoonSMTP	 */	private $smtp;	/**	 * email subject storage	 *	 * @var string	 */	private $subject;	/**	 * connection time-out storage	 *	 * @var int	 */	private $timeOut;			/**	 * initial To: storage	 * 	 * @var array	 */	private $to = array('name' => '', 'email' => '');	/**	 * class constructor	 *	 * @return void	 */	public function __construct()	{		// store the host suffix for use in the following functions		if(isset($_SERVER['HTTP_HOST'])) $this->hostSuffix = (strstr($_SERVER['HTTP_HOST'], 'www.')) ? str_replace('www.', '', $_SERVER['HTTP_HOST']) : $_SERVER['HTTP_HOST'];				// set starting values for the sender		$this->setFrom();		$this->setReplyTo();	}			/**	 * adds an attachment to the headers	 * 	 * @return void	 * @param string $file	 * @param string[optional] $newName	 * @param string[optional] $disposition	 * @param string[optional] $encoding	 */	public function addAttachment($file = null, $newName = null, $disposition = 'attachment', $encoding = 'base64')	{		// check input		if($file === null || !SpoonFile::exists($file)) throw new SpoonException('File not found.');				// store name with newname by default		$name = (string) $newName;				// no name was found in the input		if(empty($name))		{			// split up path to find the current filename			$temp = explode('/', $file);						// sort by key in reverse order so the current file is in the first element			krsort($temp);						// store first element			$name = reset($temp);		}				// store file extension		$extension = SpoonFile::getExtension($name);				// store attachment disposition		$disposition = SpoonFilter::getValue($disposition, array('attachment', 'inline'), 'attachment');				// store type according to disposition		if($disposition === 'attachment') $extension = 'default';				// store file info		$this->attachments[] = array(			'file' => $file,			'name' => $name,			'encoding' => $encoding,			'type' => $this->getAttachmentContentType($extension),			'disposition' => $disposition,			'data' => chunk_split(base64_encode(SpoonFile::getFileContent($file)))		);	}			/**	 * adds a blind carbon copy recipient to the BCC stack	 *	 * @return void	 * @param string $email	 * @param string[optional] $name	 */	public function addBCC($email = null, $name = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid e-mail address given.');				// add CC email and name to stack		$this->bcc[] = array('name' => (string) $name, 'email' => (string) $email);	}			/**	 * adds a carbon copy recipient to the CC stack	 *	 * @return void	 * @param string $email	 * @param string[optional] $name	 */	public function addCC($email = null, $name = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid e-mail address given.');				// add CC email and name to stack		$this->cc[] = array('name' => (string) $name, 'email' => (string) $email);	}	/**	 * adds a single-line header to the headers string	 *	 * @return void	 * @param string $header	 */	public function addHeader($header = null)	{		// check input		if($header === null) throw new SpoonEmailException('No header given');		// add to headers string		$this->headers .= (string) $header . self::CRLF;	}			/**	 * adds a regular recipient to the recipients stack	 *	 * @return void	 * @param string $email	 * @param string $name	 */	public function addRecipient($email = null, $name = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid e-mail address given.');				// add recipient email and name to stack		$this->recipients[] = array('name' => (string) $name, 'email' => (string) $email);	}			/**	 * adds an array of recipients	 * 	 * @return void	 * @param array $recipients	 */	public function addRecipientArray($recipients = array())	{		// check input		if(!is_array($recipients)) throw new SpoonException('Only an array with recipients is allowed.');				// array isn't empty		if(!empty($recipients))		{			// loop recipients			foreach($recipients as $recipient)			{				// we need the values, not the keys				$recipient = array_values($recipient);								// store recipient parameters				if(SpoonFilter::isEmail($recipient[0])) { $email = $recipient[0]; $name = $recipient[1]; }				if(SpoonFilter::isEmail($recipient[1])) { $email = $recipient[1]; $name = $recipient[0]; }								// check if there's an email found, if so we store it				if(SpoonFilter::isEmail($email)) $this->addRecipient($email, $name);			}		}	}  	/**	 * closes the current SMTP connection	 *	 * @return void	 */	public function closeSMTPConnection()	{		// no smtp instance found		if($this->smtp === null) throw new SpoonEmailException('You can\'t close what isn\'t opened.');		// close connection		$this->smtp->quit();	}			/**	 * gets attachment content MIME type for given file extension	 *	 * @return string	 * @param string $extension	 */	private function getAttachmentContentType($extension = null)	{		// content types listed by extension (list mostly taken from PHPmailer)    $types = array(    	'default' => 'application/octet-stream',			'ai'    =>  'application/postscript',			'aif'   =>  'audio/x-aiff',			'aifc'  =>  'audio/x-aiff',			'aiff'  =>  'audio/x-aiff',			'avi'   =>  'video/x-msvideo',			'bin'   =>  'application/macbinary',			'bmp'   =>  'image/bmp',			'cpt'   =>  'application/mac-compactpro',			'css'   =>  'text/css',			'dcr'   =>  'application/x-director',			'dir'   =>  'application/x-director',			'doc'   =>  'application/msword',			'doc'   =>  'application/msword',			'dvi'   =>  'application/x-dvi',			'dxr'   =>  'application/x-director',			'eml'   =>  'message/rfc822',			'eps'   =>  'application/postscript',			'gif'   =>  'image/gif',			'gtar'  =>  'application/x-gtar',			'hqx'   =>  'application/mac-binhex40',			'htm'   =>  'text/html',			'html'  =>  'text/html',			'jpe'   =>  'image/jpeg',			'jpeg'  =>  'image/jpeg',			'jpg'   =>  'image/jpeg',			'js'    =>  'application/x-javascript',			'log'   =>  'text/plain',			'mid'   =>  'audio/midi',			'midi'  =>  'audio/midi',			'mif'   =>  'application/vnd.mif',			'mov'   =>  'video/quicktime',			'movie' =>  'video/x-sgi-movie',			'mp2'   =>  'audio/mpeg',			'mp3'   =>  'audio/mpeg',			'mpe'   =>  'video/mpeg',			'mpeg'  =>  'video/mpeg',			'mpg'   =>  'video/mpeg',			'mpga'  =>  'audio/mpeg',			'oda'   =>  'application/oda',			'pdf'   =>  'application/pdf',			'php'   =>  'application/x-httpd-php',			'php3'  =>  'application/x-httpd-php',			'php4'  =>  'application/x-httpd-php',			'phps'  =>  'application/x-httpd-php-source',			'phtml' =>  'application/x-httpd-php',			'png'   =>  'image/png',			'ppt'   =>  'application/vnd.ms-powerpoint',			'ps'    =>  'application/postscript',			'qt'    =>  'video/quicktime',			'ra'    =>  'audio/x-realaudio',			'ram'   =>  'audio/x-pn-realaudio',			'rm'    =>  'audio/x-pn-realaudio',			'rpm'   =>  'audio/x-pn-realaudio-plugin',			'rtf'   =>  'text/rtf',			'rtx'   =>  'text/richtext',			'rv'    =>  'video/vnd.rn-realvideo',			'shtml' =>  'text/html',			'sit'   =>  'application/x-stuffit',			'smi'   =>  'application/smil',			'smil'  =>  'application/smil',			'swf'   =>  'application/x-shockwave-flash',			'tar'   =>  'application/x-tar',			'text'  =>  'text/plain',			'tgz'   =>  'application/x-tar',			'tif'   =>  'image/tiff',			'tiff'  =>  'image/tiff',			'txt'   =>  'text/plain',			'wav'   =>  'audio/x-wav',			'wbxml' =>  'application/vnd.wap.wbxml',			'wmlc'  =>  'application/vnd.wap.wmlc',			'word'  =>  'application/msword',			'xht'   =>  'application/xhtml+xml',			'xhtml' =>  'application/xhtml+xml',			'xl'    =>  'application/excel',			'xls'   =>  'application/vnd.ms-excel',			'xml'   =>  'text/xml',			'xsl'   =>  'text/xml',			'zip'   =>  'application/zip'    );        // return default if no (or unknown) extension is provided    if($extension === null || empty($types[$extension])) return $types['default'];   	    // return content type    return (string) $types[$extension];  }			/**	 * returns debug status	 * 	 * @return bool	 */	public function getDebug()	{			// return debug status		return (bool) $this->debug;	}	/**	 * builds the mail headers	 * 	 * @return void	 */	private function getHeaders()	{		// create boundaries		$uniqueId = md5(uniqid(time()));		$boundary = 'SpoonEmail_Boundary1_' . $uniqueId;		$secondBoundary = 'SpoonEmail_Boundary2_' . $uniqueId;		// build headers		$this->addHeader('Date: '.date('r'));		$this->addHeader('From: '.$this->from['name'].' <'.$this->from['email'].'>');				// check mailmethod, some media don't need these (like mail())		if($this->mailMethod == 'smtp')		{			// set subject			$this->addHeader('Subject: '.$this->subject);						// set general To: header. useful if you prefer to customize it			if(!empty($this->to['name'])) $this->addHeader('To: '.$this->to['name'].' <'.$this->to['email'].'>');						// no To: set so we add recipients to the headers			else $this->addHeader('To: '. $this->reformatRecipientString($this->recipients));		}				// loop and add CCs to headers		if(!empty($this->cc)) $this->addHeader('cc: '. $this->reformatRecipientString($this->cc));				// loop and add BCCs to headers		if(!empty($this->bcc)) $this->addHeader('bcc: '. $this->reformatRecipientString($this->bcc));				// if attachments are set, change the mail content type		if(!empty($this->attachments)) $this->contentType = 'multipart/mixed';				// continue the rest of the headers		$this->addHeader('Reply-To: '. $this->replyTo['name'] .' <'. $this->replyTo['email'].'>');		$this->addHeader('Return-Path: '. $this->from['email']);		$this->addHeader('X-Priority: '. $this->priority);		$this->addHeader('X-Mailer: SpoonEmail (part of Spoon library - http://www.spoon-library.be)');		$this->addHeader('MIME-Version: 1.0');		$this->addHeader('Content-Type: '. $this->contentType .'; boundary="'. $boundary .'"'. self::CRLF);		$this->addHeader('Importance: normal');		$this->addHeader('Priority: normal');		$this->addHeader('This is a multi-part message in MIME format.' . self::CRLF);		$this->addHeader('--'. $boundary);				// attachments found 		if(!empty($this->attachments))		{			// means we need a second boundary defined to send html/plain mails.			$this->addHeader('Content-Type: multipart/alternative; boundary="'. $secondBoundary .'"'. self::CRLF);			$this->addHeader('--'. $secondBoundary);			$this->addHeader('Content-Type: text/plain; charset="'. $this->charset .'"');			$this->addHeader('Content-Disposition: inline');			$this->addHeader('Content-Transfer-Encoding: 8bit' . self::CRLF);			$this->addHeader($this->content['plain'] . self::CRLF);			$this->addHeader('--'. $secondBoundary);			$this->addHeader('Content-Type: text/html; charset="'. $this->charset .'"');			$this->addHeader('Content-Disposition: inline');			$this->addHeader('Content-Transfer-Encoding: 8bit' . self::CRLF);			$this->addHeader($this->content['html'] . self::CRLF);			$this->addHeader('--'. $secondBoundary .'--');		}				else 		{			// continue the rest of the headers			$this->addHeader('Content-Type: text/plain; charset="'. $this->charset .'"');			$this->addHeader('Content-Disposition: inline');			$this->addHeader('Content-Transfer-Encoding: 8bit' . self::CRLF);			$this->addHeader($this->content['plain'] . self::CRLF);			$this->addHeader('--'. $boundary);			$this->addHeader('Content-Type: text/html; charset="'. $this->charset .'"');			$this->addHeader('Content-Disposition: inline');			$this->addHeader('Content-Transfer-Encoding: 8bit' . self::CRLF);			$this->addHeader($this->content['html'] . self::CRLF);		}				// attachments found		if(!empty($this->attachments))		{			// loop attachments			foreach($this->attachments as $attachment)			{				// set attachment headers				$this->addHeader('--'. $boundary);				$this->addHeader('Content-Type: '. $attachment['type'] .'; name="'. $attachment['name'] .'"');				$this->addHeader('Content-Transfer-Encoding: '. $attachment['encoding']);				$this->addHeader('Content-Disposition: '. $attachment['disposition'] .'; filename="'. $attachment['name'] .'"' . self::CRLF);				$this->addHeader($attachment['data'] . self::CRLF);			}		}		// final boundary, closes the headers		$this->headers .= '--'. $boundary .'--';		// return headers string		return $this->headers;	}	/**	 * returns connection output. works only if debug is enabled	 *	 * @return string	 */	public function getOutput()	{		// debugging mode		if($this->debug) return $this->smtp->getOutput();	}		/**	 * takes the name and email in the given array and separates	 * them with commas so they fit in a header	 *	 * @return string	 * @param array $recipients	 */	private function reformatRecipientString($recipients = array())	{		// recipients found		if(!empty($recipients))		{			// loop recipients			foreach($recipients as $recipient)			{				// reformat to a proper string				$stack = $recipient['name'].' <'.$recipient['email'].'>';								// just the email will do if no name is set				if(empty($recipient['name'])) $stack = $recipient['email'];								// add a comma as separator and store in new recipients stack				$string .= $stack.', ';			}						// return the reformatted string			return substr($string, 0, -2);		}	}		/**	 * sends the email	 *	 * @return void	 */	public function send()	{		// no recipients found		if(empty($this->recipients)) throw new SpoonEmailException('Sending an email to no one is pretty redundant. Add some recipients first.');		// builds the headers for this email		$headers = $this->getHeaders();				// check for mailmethod		switch($this->mailMethod)		{			// send with SMTP protocol			case 'smtp':				// pass MAIL FROM command				$this->smtp->mailFrom($this->from['email'], $this->from['name']);								// pass regular/CC/BCC recipients with RCPT TO command				if(!empty($this->recipients)) foreach($this->recipients as $recipient) $this->smtp->rcptTo($recipient['email']);				if(!empty($this->cc)) foreach($this->cc as $recipient) $this->smtp->rcptTo($recipient['email']);				if(!empty($this->bcc)) foreach($this->bcc as $recipient) $this->smtp->rcptTo($recipient['email']);								// initiate SMTP send				$this->smtp->send($headers);			break;			// send with PHP's native mail() function			case 'mail':				// send mail				mail($this->reformatRecipientString($this->recipients), $this->subject, null, $headers);			break;			// no one should be here			default:				throw new SpoonEmailException('Invalid mailmethod');		}				// clear the recipient lists and the headers		unset($this->recipients, $this->cc, $this->bcc, $this->headers);	}			/**	 * changes the charset from standard iso-8859-1 to whatever you like	 *	 * @return void	 * @param string $charset	 */	public function setCharset($charset = 'iso-8859-1')	{		// check input		if($charset === null) throw new SpoonException('No charset given.');				// set charset		$this->charset = (string) $charset;	}	/**	 * sets the mail HTML and/or alt content	 *	 * @return void	 * @param string $html	 * @param string $plain	 */	public function setContent($html = null, $plain = null)	{		// check input		if($html === null && $plain === null) throw new SpoonEmailException('Provide either an HTML or plain body for '.__METHOD__);				// store content		$this->content['html'] = (string) $html;		$this->content['plain'] = (string) $plain;	}			/**	 * sets debug mode on/off	 * 	 * @return void	 * @param bool[optional] $debug	 */	public function setDebug($debug = false)	{		// set debug status		$this->debug = (bool) $debug;	}	/**	 * adds the sender info	 *	 * @return void	 * @param string $email	 * @param string $name	 */	public function setFrom($email = null, $name = null)	{		// check input and replace empty values		if($email === null) $email = 'no-reply@'. $this->hostSuffix;		if($name === null) $name = $this->hostSuffix;		// check for valid email address		if(!SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid email given.');		// save the 'from' information		$this->from['name'] = (string) $name;		$this->from['email'] = (string) $email;	}			/**	 * sets the e-mail priority level	 * 	 * @return void	 * @param int $level	 */	public function setPriority($level = 3)	{		// check input		if($level === null || !SpoonFilter::isInteger($level) || !SpoonFilter::getValue($level, array(1, 2, 3, 4, 5), 3, 'int')) throw new SpoonEmailException('No valid priority level given, integer from 1 to 5 required.');				// store priority level		$this->priority = $level;	}			/**	 * sets the Reply-To header	 * 	 * @return void	 * @param string $email	 * @param string[optional] $name	 */	public function setReplyTo($email = null, $name = null)	{		// check input and replace empty values		if($email === null) $email = 'no-reply@'. $this->hostSuffix;		if($name === null) $name = $this->hostSuffix;		// check for valid email address		if(!SpoonFilter::isEmail($email)) throw new SpoonEmailException('No valid email given.');				// save the 'reply-to' information		$this->replyTo['name'] = (string) $name;		$this->replyTo['email']	= (string) $email;	}	/**	 * sets authentication info for the current SMTP connection	 *	 * @return void	 * @param string $username	 * @param string $password	 */	public function setSMTPAuth($username = null, $password = null)	{		// check input		if($username === null || $password === null) throw new SpoonEmailException('No username or password given.');		// no smtp instance found		if(!$this->smtp) throw new SpoonEmailException('Make an SMTP connection first.');		// push user and pass to the smtp object		$this->smtp->authenticate($username, $password);	}	/**	 * sets the SMTP connection	 *	 * @return void	 * @param string[optional] $host	 * @param int[optional] $port	 * @param int[optional] $timeOut	 */	public function setSMTPConnection($host = 'localhost', $port = 25, $timeOut = 30)	{		// set mailing method to smtp		$this->mailMethod = 'smtp';		// check if smtp.php is present		if(!SpoonFile::exists(dirname(__FILE__).'/smtp.php')) throw new SpoonEmailException('SpoonSMTP not found, relocate and put it in the same folder as SpoonEmail.');		// require SpoonSMTP at this point		require_once 'smtp.php';		// check for class name		if(!class_exists('SpoonSMTP')) throw new SpoonEmailException('SpoonSMTP is not loaded, check your smtp.php file.');		// store server information		$this->smtp = new SpoonSMTP($host, $port, $timeOut);	}	/**	 * sets the email's subject line	 *	 * @return void	 * @param string $string	 */	public function setSubject($string = '')	{		// store subject		$this->subject = (string) $string;	}			/**	 * sets the initial To: header to whatever you like	 * this will have no effect if you don't use SMTP mail	 * 	 * @return void	 * @param string $name	 * @param string $email	 */	public function setTo($name = null, $email = null)	{		// check input		if($email === null || !SpoonFilter::isEmail($email)) $email = SpoonFilter::urlise($name).'@'.$this->hostSuffix;				// save the 'to' information		$this->to['name'] = (string) $name;		$this->to['email']	= (string) $email;	}}?>